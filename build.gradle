import com.github.edwgiz.mavenShadePlugin.log4j2CacheTransformer.PluginsCacheFileTransformer
import com.github.jengelman.gradle.plugins.shadow.relocation.Relocator
import org.apache.tools.zip.ZipOutputStream

buildscript {
    repositories {
        maven {
            url 'http://maven.ej-technologies.com/repository'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.github.edwgiz:maven-shade-plugin.log4j2-cachefile-transformer:2.6.1'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

apply plugin: "com.github.johnrengelman.shadow"

apply plugin: 'java'
apply plugin: 'application'

group 'cf.adriantodt.bot'
version '4.0-BETA'

mainClassName = "cf.adriantodt.bot.Startup"

println System.getProperty("java.home")

repositories {
    mavenCentral()
    jcenter()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    //compile 'net.dv8tion:JDA:2.2.1_373'
    //compile fileTree(dir: 'libs', include: '*.jar') //JDA3 is in /libs
    compile name: 'JDA-withDependencies-3.0.ALPHA_42'
    //compile name: 'ModularServer-1.0'
    //source name: 'JDA-3.0.ALPHA_34-sources'
    //javadoc name: 'JDA-3.0.ALPHA_34-javadoc'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.6.2'
    compile group: 'com.rethinkdb', name: 'rethinkdb-driver', version: '2.3.3'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile group: 'org.luaj', name: 'luaj-jse', version: '3.0.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '1.7.2'
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.4.1.RELEASE') {
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.1'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '1.4.1.RELEASE'
}

def commonManifest = {
    attributes 'Main-Class': mainClassName
}

shadowJar {
    classifier 'fat'
    transform(new com.github.jengelman.gradle.plugins.shadow.transformers.Transformer() {

        // this is an adapter required for generating a fat jar with correct log4j2 output

        PluginsCacheFileTransformer target = new PluginsCacheFileTransformer();

        @Override
        boolean canTransformResource(FileTreeElement element) {
            return target.canTransformResource(element.getPath());
        }

        @Override
        void transform(String path, InputStream is, List<Relocator> relocators) {
            target.processResource(path, is, relocators);
        }

        @Override
        boolean hasTransformedResource() {
            return target.hasTransformedResource();
        }

        @Override
        void modifyOutputStream(ZipOutputStream jos) {
            target.modifyOutputStream(jos);
        }
    })
}


run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

compileJava.options.encoding = 'UTF-8'

jar {
    manifest commonManifest
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

artifacts {
    archives shadowJar//, sourceJar
}